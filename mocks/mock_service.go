// Code generated by MockGen. DO NOT EDIT.
// Source: todo-lists/services (interfaces: IService)

// Package services is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"
	entity "todo-lists/entity"

	gomock "github.com/golang/mock/gomock"
)

// MockIService is a mock of IService interface.
type MockIService struct {
	ctrl     *gomock.Controller
	recorder *MockIServiceMockRecorder
}

// MockIServiceMockRecorder is the mock recorder for MockIService.
type MockIServiceMockRecorder struct {
	mock *MockIService
}

// NewMockIService creates a new mock instance.
func NewMockIService(ctrl *gomock.Controller) *MockIService {
	mock := &MockIService{ctrl: ctrl}
	mock.recorder = &MockIServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIService) EXPECT() *MockIServiceMockRecorder {
	return m.recorder
}

// CreateTask mocks base method.
func (m *MockIService) CreateTask(arg0 *entity.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTask", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTask indicates an expected call of CreateTask.
func (mr *MockIServiceMockRecorder) CreateTask(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTask", reflect.TypeOf((*MockIService)(nil).CreateTask), arg0)
}

// DeleteTask mocks base method.
func (m *MockIService) DeleteTask(arg0 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTask", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTask indicates an expected call of DeleteTask.
func (mr *MockIServiceMockRecorder) DeleteTask(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTask", reflect.TypeOf((*MockIService)(nil).DeleteTask), arg0)
}

// FilterTasksByDeadline mocks base method.
func (m *MockIService) FilterTasksByDeadline(arg0, arg1 time.Time) ([]entity.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterTasksByDeadline", arg0, arg1)
	ret0, _ := ret[0].([]entity.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterTasksByDeadline indicates an expected call of FilterTasksByDeadline.
func (mr *MockIServiceMockRecorder) FilterTasksByDeadline(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterTasksByDeadline", reflect.TypeOf((*MockIService)(nil).FilterTasksByDeadline), arg0, arg1)
}

// GetAllTasks mocks base method.
func (m *MockIService) GetAllTasks() ([]entity.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTasks")
	ret0, _ := ret[0].([]entity.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllTasks indicates an expected call of GetAllTasks.
func (mr *MockIServiceMockRecorder) GetAllTasks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTasks", reflect.TypeOf((*MockIService)(nil).GetAllTasks))
}

// GetTaskById mocks base method.
func (m *MockIService) GetTaskById(arg0 int) (entity.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTaskById", arg0)
	ret0, _ := ret[0].(entity.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTaskById indicates an expected call of GetTaskById.
func (mr *MockIServiceMockRecorder) GetTaskById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTaskById", reflect.TypeOf((*MockIService)(nil).GetTaskById), arg0)
}

// GetTasksByTag mocks base method.
func (m *MockIService) GetTasksByTag(arg0 string) ([]entity.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTasksByTag", arg0)
	ret0, _ := ret[0].([]entity.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTasksByTag indicates an expected call of GetTasksByTag.
func (mr *MockIServiceMockRecorder) GetTasksByTag(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTasksByTag", reflect.TypeOf((*MockIService)(nil).GetTasksByTag), arg0)
}

// SearchTasksByName mocks base method.
func (m *MockIService) SearchTasksByName(arg0 string) ([]entity.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchTasksByName", arg0)
	ret0, _ := ret[0].([]entity.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchTasksByName indicates an expected call of SearchTasksByName.
func (mr *MockIServiceMockRecorder) SearchTasksByName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchTasksByName", reflect.TypeOf((*MockIService)(nil).SearchTasksByName), arg0)
}

// UpdateTask mocks base method.
func (m *MockIService) UpdateTask(arg0 *entity.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTask", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTask indicates an expected call of UpdateTask.
func (mr *MockIServiceMockRecorder) UpdateTask(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTask", reflect.TypeOf((*MockIService)(nil).UpdateTask), arg0)
}
